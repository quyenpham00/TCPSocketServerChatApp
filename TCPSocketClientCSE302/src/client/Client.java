/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Admin
 */
public class Client extends javax.swing.JFrame {

    private Thread thread;
    private BufferedWriter os;
    private BufferedReader is;
    private Socket socketOfClient;
    private List<String> onlineList;
    private int id;
    static DefaultListModel messListModel;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        messListModel = new DefaultListModel();
        listMess.setModel(messListModel);
        txtOnlineUser.setEditable(false);
        onlineList = new ArrayList<>();
        setUpSocket();
        id = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        fileChooser = new javax.swing.JFileChooser();
        imageChooser = new javax.swing.JFileChooser();
        tabPane = new javax.swing.JTabbedPane();
        panelUserOnline = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOnlineUser = new javax.swing.JTextArea();
        panelChatBox = new javax.swing.JPanel();
        txtText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        cbbReceiver = new javax.swing.JComboBox<>();
        lblReceiver = new javax.swing.JLabel();
        lblReceive = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listMess = new javax.swing.JList<>();
        btnPicture = new javax.swing.JButton();
        btnFile = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtOnlineUser.setColumns(20);
        txtOnlineUser.setRows(5);
        jScrollPane2.setViewportView(txtOnlineUser);

        javax.swing.GroupLayout panelUserOnlineLayout = new javax.swing.GroupLayout(panelUserOnline);
        panelUserOnline.setLayout(panelUserOnlineLayout);
        panelUserOnlineLayout.setHorizontalGroup(
            panelUserOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );
        panelUserOnlineLayout.setVerticalGroup(
            panelUserOnlineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        tabPane.addTab("Online Clients", panelUserOnline);

        panelChatBox.setBackground(new java.awt.Color(15, 85, 143));

        txtText.setBackground(new java.awt.Color(242, 243, 245));

        jButton1.setBackground(new java.awt.Color(15, 85, 143));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Paper_Plane_32px.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbbReceiver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbReceiverActionPerformed(evt);
            }
        });

        lblReceiver.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblReceiver.setForeground(new java.awt.Color(255, 255, 255));
        lblReceiver.setText("Receiver:");

        lblReceive.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblReceive.setForeground(new java.awt.Color(255, 255, 255));
        lblReceive.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblReceive.setText("{Receiver}");

        listMess.setBackground(new java.awt.Color(242, 243, 245));
        listMess.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(listMess);

        btnPicture.setBackground(new java.awt.Color(15, 85, 143));
        btnPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_image_32px.png"))); // NOI18N
        btnPicture.setBorder(null);
        btnPicture.setFocusPainted(false);
        btnPicture.setPreferredSize(new java.awt.Dimension(47, 23));
        btnPicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPictureActionPerformed(evt);
            }
        });

        btnFile.setBackground(new java.awt.Color(15, 85, 143));
        btnFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_attach_32px.png"))); // NOI18N
        btnFile.setBorder(null);
        btnFile.setFocusPainted(false);
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChatBoxLayout = new javax.swing.GroupLayout(panelChatBox);
        panelChatBox.setLayout(panelChatBoxLayout);
        panelChatBoxLayout.setHorizontalGroup(
            panelChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChatBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblReceive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelChatBoxLayout.createSequentialGroup()
                        .addGroup(panelChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbbReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelChatBoxLayout.createSequentialGroup()
                                .addComponent(btnPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtText, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelChatBoxLayout.setVerticalGroup(
            panelChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChatBoxLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblReceive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblReceiver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbbReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelChatBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46))
        );

        tabPane.addTab("Chat Box", panelChatBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String messageContent = txtText.getText();
            if (messageContent.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "You haven't entered the message");
                return;
            }
            String msgOut = "msg,";
            if (cbbReceiver.getSelectedIndex() == 0) {
                msgOut += "sendMess-to-global," + messageContent + "," + this.id;
                messListModel.addElement("You: " + messageContent + "\n");
            } else {
                String[] parner = ((String) cbbReceiver.getSelectedItem()).split(" ");
                msgOut += "sendMess-to-person," + messageContent + "," + this.id + "," + parner[1];
                messListModel.addElement("You (to Client " + parner[1] + "): " + messageContent + "\n");
            }
            writeMess(msgOut);
            txtText.setText("");
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbbReceiverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbReceiverActionPerformed
        if (cbbReceiver.getSelectedIndex() == 0) {
            lblReceive.setText("Global");
        } else {
            lblReceive.setText("You are sending message to " + cbbReceiver.getSelectedItem());
        }
    }//GEN-LAST:event_cbbReceiverActionPerformed

    private void btnPictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPictureActionPerformed
        FileFilter imageFilter = new FileNameExtensionFilter(
                "Image files", ImageIO.getReaderFileSuffixes());
        imageChooser.setFileFilter(imageFilter);

        if (imageChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = imageChooser.getSelectedFile();
                Image image = ImageIO.read(file);
                ImageIcon ic = new ImageIcon(image);
                String msgout = "msgImage,";
                if (cbbReceiver.getSelectedIndex() == 0) {
                    msgout += "sendImage-to-global" + "," + file.getName() + "," + this.id;
                    messListModel.addElement("You: ");
                    messListModel.addElement(ic);
                } else {
                    String[] parner = ((String) cbbReceiver.getSelectedItem()).split(" ");
                    msgout += "sendImage-to-person" + "," + file.getName() + "," + this.id + "," + parner[1];
                    messListModel.addElement("You (to Client " + parner[1] + "): ");
                    messListModel.addElement(ic);
                }

                writeMess(msgout);
                BufferedOutputStream bos = new BufferedOutputStream(socketOfClient.getOutputStream());
                BufferedImage bufferImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
                Graphics graphics = bufferImage.createGraphics();
                graphics.drawImage(image, 0, 0, null);
                graphics.dispose();
                ImageIO.write(bufferImage, "png", bos);
                bos.flush();

            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnPictureActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileInputStream fis = null;
            try {
                File file = fileChooser.getSelectedFile();
                String msgout = "msgFile,";
                if (cbbReceiver.getSelectedIndex() == 0) {
                    msgout += "sendFile-to-global" + "," + file.getName() + "," + this.id + "\n";
                    messListModel.addElement("You: "+file.getName());
                  
                } else {
                    String[] parner = ((String) cbbReceiver.getSelectedItem()).split(" ");
                    msgout += "sendFile-to-person" + "," + file.getName() + "," + this.id + "," + parner[1] + "\n";
                    messListModel.addElement("You (to Client " + parner[1] + "): "+file.getName());
                }
                writeMess(msgout);
                fis = new FileInputStream(file);
                byte[] b = new byte[2002];
                fis.read(b, 0, b.length);
                OutputStream oos = socketOfClient.getOutputStream();
                oos.write(b, 0, b.length);
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fis.close();
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_btnFileActionPerformed

    private void setUpSocket() {
        try {
            thread = new Thread() {
                @Override
                public void run() {

                    try {
                        // Gửi yêu cầu kết nối tới Server đang lắng nghe
                        // trên máy 'localhost' cổng 7777.
                        socketOfClient = new Socket("localhost", 7777);
                        System.out.println("Connect succeed");
                        // Tạo luồng đầu ra tại client (Gửi dữ liệu tới server)
                        os = new BufferedWriter(new OutputStreamWriter(socketOfClient.getOutputStream()));
                        // Luồng đầu vào tại Client (Nhận dữ liệu từ server).
                        is = new BufferedReader(new InputStreamReader(socketOfClient.getInputStream()));
                        String message;
                        while (true) {

                            message = is.readLine();
                            System.out.println(message);
                            if (message == null) {
                                break;
                            }
                            String[] messageSplit = message.split(",");
                            if (messageSplit[0].equals("get-id")) {
                                setID(Integer.parseInt(messageSplit[1]));
                                setIDTitle();
                            }
                            if (messageSplit[0].equals("update-online-list")) {
                                onlineList = new ArrayList<>();
                                String online = "";
                                String[] onlineSplit = messageSplit[1].split("-");
                                for (int i = 0; i < onlineSplit.length; i++) {
                                    onlineList.add(onlineSplit[i]);
                                    online += "Client " + onlineSplit[i] + " online\n";
                                }
                                txtOnlineUser.setText(online);
                                updateCombobox();
                            }
                            if (messageSplit[0].contains("global-message")) {
                                messListModel.addElement(messageSplit[1] + "\n");
                            }
                            if (messageSplit[0].contains("global-image")) {
                                BufferedInputStream bis = new BufferedInputStream(socketOfClient.getInputStream());
                                BufferedImage bufferedImage = ImageIO.read(bis);
                                messListModel.addElement(messageSplit[1]);
                                ImageIcon ic = new ImageIcon(bufferedImage);
                                messListModel.addElement(ic);
                            }
                            if (messageSplit[0].contains("global-file")) {
                                System.out.println(".run()xxxxxxx");
                                messListModel.addElement(messageSplit[1] + messageSplit[2]);
                                FileOutputStream fos = null;
                                InputStream is = socketOfClient.getInputStream();
                                byte[] buffer = new byte[2002];
                                is.read(buffer, 0, buffer.length);
                                fos = new FileOutputStream("UserTransferFile" + "\\" + messageSplit[2]);
                                fos.write(buffer, 0, buffer.length);
                                fos.flush();
                            }
                        }
                    } catch (UnknownHostException e) {
                        return;
                    } catch (IOException e) {
                        return;
                    }
                }
            };
            thread.run();
        } catch (Exception e) {
        }
    }

    private void updateCombobox() {
        cbbReceiver.removeAllItems();
        cbbReceiver.addItem("Send message to all online clients");
        String idString = "" + this.id;
        for (String e : onlineList) {
            if (!e.equals(idString)) {
                cbbReceiver.addItem("Client " + e);
            }
        }

    }

    private void setIDTitle() {
        this.setTitle("Client " + this.id);
    }

    private void setID(int id) {
        this.id = id;
    }

    private void writeMess(String message) throws IOException {
        os.write(message);
        os.newLine();
        os.flush();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Client client = new Client();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnPicture;
    private javax.swing.JComboBox<String> cbbReceiver;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFileChooser imageChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblReceive;
    private javax.swing.JLabel lblReceiver;
    private javax.swing.JList<String> listMess;
    private javax.swing.JPanel panelChatBox;
    private javax.swing.JPanel panelUserOnline;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTextArea txtOnlineUser;
    private javax.swing.JTextField txtText;
    // End of variables declaration//GEN-END:variables
}
